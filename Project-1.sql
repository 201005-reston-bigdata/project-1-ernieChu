CREATE TABLE OCT20
 (COUNTRY_CODE STRING,
  TITLE STRING,
  VIEWS INT,
  ACK INT)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY ' ';

LOAD DATA LOCAL INPATH '/home/ernie/oct/' INTO TABLE OCT20;

#1. Which English wikipedia article got the most traffic on October 20?
SELECT TITLE, SUM(VIEWS) AS MOST_POPULAR_ON_OCT_20
FROM OCT20
WHERE UPPER(COUNTRY_CODE) = 'EN' OR UPPER(COUNTRY_CODE)='EN.M'
GROUP BY TITLE
SORT BY MOST_POPULAR_ON_OCT_20 DESC
LIMIT 10;

CREATE TABLE MONTH_OF_SEPT
  (COUNTRY_CODE STRING,
   TITLE STRING,
   VIEWS INT,
   ACK INT)
   ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ' ';

LOAD DATA LOCAL INPATH '/home/ernie/allsept/' INTO TABLE MONTH_OF_SEPT;

CREATE TABLE TOTAL_VIEWS_IN_SEPT AS
SELECT TITLE, SUM(VIEWS) AS TOTAL_VIEWS
FROM MONTH_OF_SEPT
WHERE UPPER(COUNTRY_CODE)='EN' OR UPPER(COUNTRY_CODE)='EN.M'
GROUP BY TITLE
SORT BY TOTAL_VIEWS DESC
# Set a number of rows to return, gives better results.
LIMIT 100;

CREATE TABLE CLICKSTREAM_SEPT
  (PREVIOUS_REFERRER_URL STRING,
   CURRENT_REQUESTER_URL STRING,
   TYPE STRING,
   OCCURRENCES INT)
   ROW FORMAT DELIMITED
   FIELDS TERMINATED BY '\t';

LOAD DATA LOCAL INPATH '/home/ernie/clickstream-enwiki-2020-09.tsv' INTO TABLE CLICKSTREAM_SEPT;

CREATE TABLE TOTAL_VIEWS_IN_CLICKSTREAM_SEPT AS
SELECT PREVIOUS_REFERRER_URL, SUM(OCCURRENCES) AS LINKS_FOLLOWED
FROM CLICKSTREAM_SEPT
WHERE UPPER(TYPE)='LINK'
GROUP BY PREVIOUS_REFERRER_URL
SORT BY LINKS_FOLLOWED DESC
LIMIT 100;

#2. What English wikipedia article has the largest fraction of its readers follow an internal link to another wikipedia article?
SELECT TOTAL_VIEWS_IN_SEPT.TITLE, TOTAL_VIEWS_IN_SEPT.TOTAL_VIEWS, TOTAL_VIEWS_IN_CLICKSTREAM_SEPT.LINKS_FOLLOWED, ROUND(TOTAL_VIEWS_IN_CLICKSTREAM_SEPT.LINKS_FOLLOWED / TOTAL_VIEWS_IN_SEPT.TOTAL_VIEWS * 100, 2) AS PERCENTAGE_LINKS_CLICKED
FROM TOTAL_VIEWS_IN_SEPT
INNER JOIN TOTAL_VIEWS_IN_CLICKSTREAM_SEPT ON TOTAL_VIEWS_IN_SEPT.TITLE=TOTAL_VIEWS_IN_CLICKSTREAM_SEPT.PREVIOUS_REFERRER_URL
SORT BY PERCENTAGE_LINKS_CLICKED DESC
LIMIT 10;

#3. What series of wikipedia articles, starting with Hotel California, keeps the largest fraction of its readers clicking on internal links? This is similar to (2), but you should continue the analysis past the first article.
# Repeat successively, replace the "PREVIOUS_REFERRER_URL" with the highest Title string of each iteration.
SELECT * FROM CLICKSTREAM_SEPT
WHERE UPPER(TYPE)='LINK' AND PREVIOUS_REFERRER_URL LIKE 'Hotel_California'
SORT BY OCCURRENCES DESC
LIMIT 10;
# Gives Hotel_California_(Eagles_album) with 2222 occurrences.

CREATE TABLE RELATIVE_POPULARITY
  (WIKI_DB STRING,
   EVENT_ENTITY STRING,
   EVENT_TYPE STRING,
   EVENT_TIMESTAMP STRING,
   EVENT_COMMENT STRING,
   EVENT_USER_ID BIGINT,
   EVENT_USER_TEXT_HISTORICAL STRING,
   EVENT_USER_TEXT STRING,
   EVENT_USER_BLOCKS_HISTORICAL ARRAY<STRING>,
   EVENT_USER_BLOCKS ARRAY<STRING>,
   EVENT_USER_GROUPS_HISTORICAL ARRAY<STRING>,
   EVENT_USER_GROUPS ARRAY<STRING>,
   EVENT_USER_IS_BOT_BY_HISTORICAL ARRAY<STRING>,
   EVENT_USER_IS_BOT_BY ARRAY<STRING>,
   EVENT_USER_IS_CREATED_BY_SELF BOOLEAN,
   EVENT_USER_IS_CREATED_BY_SYSTEM BOOLEAN,
   EVENT_USER_IS_CREATED_BY_PEER BOOLEAN,
   EVENT_USER_IS_ANONYMOUS BOOLEAN,
   EVENT_USER_REGISTRATION_TIMESTAMP STRING,
   EVENT_USER_CREATION_TIMESTAMP STRING,
   EVENT_USER_FIRST_EDIT_TIMESTAMP STRING,
   EVENT_USER_REVISION_COUNT BIGINT,
   EVENT_USER_SECONDS_SINCE_PREVIOUS_REVISION BIGINT,
   PAGE_ID BIGINT,
   PAGE_TITLE_HISTORICAL STRING,
   PAGE_TITLE STRING,
   PAGE_NAMESPACE_HISTORICAL INT,
   PAGE_NAMESPACE_IS_CONTENT_HISTORICAL BOOLEAN,
   PAGE_NAMESPACE INT,
   PAGE_NAMESPACE_IS_CONTENT BOOLEAN,
   PAGE_IS_REDIRECT BOOLEAN,
   PAGE_IS_DELETED BOOLEAN,
   PAGE_CREATION_TIMESAMP STRING,
   PAGE_FIRST_EDIT_TIMESTAMP STRING,
   PAGE_REVISION_COUNT BIGINT,
   PAGE_SECONDS_SINCE_PREVIOUS_REVISION BIGINT,
   USER_ID BIGINT,
   USER_TEXT_HISTORICAL STRING,
   USER_TEXT STRING,
   USER_BLOCKS_HISTORICAL ARRAY<STRING>,
   USER_BLOCKS ARRAY<STRING>,
   USER_GROUPS_HISTORICAL ARRAY<STRING>,
   USER_GROUPS ARRAY<STRING>,
   USER_IS_BOT_BY_HISTORICAL ARRAY<STRING>,
   USER_IS_BOT_BY ARRAY<STRING>,
   USER_IS_CREATED_BY_SELF BOOLEAN,
   USER_IS_CREATED_BY_SYSTEM BOOLEAN,
   USER_IS_CREATED_BY_PEER BOOLEAN,
   USER_IS_ANONYMOUS BOOLEAN,
   USER_REGISTRATION_TIMESTAMP STRING,
   USER_CREATION_TIMESTAMP STRING,
   USER_FIRST_EDIT_TIMESTAMP STRING,
   REVISION_ID BIGINT,
   REVISION_PARENT_ID BIGINT,
   REVISION_MINOR_EDIT BOOLEAN,
   REVISION_DELETED_PARTS ARRAY<STRING>,
   REVISION_DELETED_PARTS_ARE_SUPRESSED BOOLEAN,
   REVISION_TEXT_BYTES BIGINT,
   REVISION_TEXT_BYTES_DIFF BIGINT,
   REVISION_TEXT_SHA1 STRING,
   REVISION_CONTENT_MODEL STRING,
   REVISION_CONTENT_FORMAT STRING,
   REVISION_IS_DELETED_BY_PAGE_DELETION BOOLEAN,
   REVISION_DELETED_BY_PAGE_ADDITION_TIMESTAMP STRING,
   REVISION_IS_IDENTITY_REVERTED BOOLEAN,
   REVISION_FIRST_IDENTITY_REVERTING_REVISION_ID BIGINT,
   REVISION_SECONDS_TO_IDENTITY_REVERT BIGINT,
   REVISION_IS_IDENTITY_REVERT BOOLEAN,
   REVISION_IS_FROM_BEFORE_PAGE_CREATION BOOLEAN,
   REVISION_TAGS ARRAY<STRING>,
   TS INT)
   ROW FORMAT DELIMITED
   FIELDS TERMINATED BY '\t';

LOAD DATA LOCAL INPATH '/home/ernie/edits/2020-09.enwiki.2020-09.tsv' INTO TABLE RELATIVE_POPULARITY;

#4
SELECT PAGE_ID, PAGE_TITLE, EVENT_TIMESTAMP
FROM RELATIVE_POPULARITY
WHERE UPPER(EVENT_ENTITY)='PAGE' OR UPPER(EVENT_ENTITY)='REVISION'
GROUP BY PAGE_ID, PAGE_TITLE, EVENT_TIMESTAMP
SORT BY PAGE_ID ASC
LIMIT 1000;

# Get the number of times revisions were made to articles in September 2019.
CREATE TABLE TOTAL_NUMBER_OF_REVISIONS AS
SELECT COUNT(REVISION_SECONDS_TO_IDENTITY_REVERT) AS TOTAL_NUMBER_OF_REVISIONS_IN_SEPT
FROM RELATIVE_POPULARITY
WHERE REVISION_SECONDS_TO_IDENTITY_REVERT > 0;

# Get the total number of views across all articles that were present in September 2019.
CREATE TABLE TOTAL_NUMBER_OF_VIEWS AS
SELECT SUM(OCCURRENCES) AS TOTAL_NUMBER_OF_VIEWS_IN_SEPT
FROM CLICKSTREAM_SEPT;

# Divide the number of views by the number of revisions to see the number of times an article was viewed per revision.
# 5. Analyze how many users will see the average vandalized wikipedia page before the offending edit is reversed.
SELECT ROUND(TOTAL_NUMBER_OF_VIEWS.TOTAL_NUMBER_OF_VIEWS_IN_SEPT / TOTAL_NUMBER_OF_REVISIONS.TOTAL_NUMBER_OF_REVISIONS_IN_SEPT, 2) AS AVERAGE_NUMBER_OF_VIEWS_BEFORE_REVISION
FROM TOTAL_NUMBER_OF_REVISIONS, TOTAL_NUMBER_OF_VIEWS;

#6. Run an analysis you find interesting on the wikipedia datasets we're using.
SELECT TITLE, SUM(VIEWS) AS TOTAL
FROM MONTH_OF_SEPT
WHERE UPPER(COUNTRY_CODE)='EN' OR UPPER(COUNTRY_CODE)='EN.M'
GROUP BY TITLE
SORT BY TOTAL DESC
LIMIT 10;